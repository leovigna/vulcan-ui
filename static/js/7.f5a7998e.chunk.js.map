{"version":3,"sources":["components/Etherscan/EtherScan.tsx","components/FeedTable/FeedTable.tsx","components/FeedChart/FeedChart.tsx","views/FeedView/FeedView.tsx","views/FeedView/ChainlinkFeedView.tsx"],"names":["EtherScan","address","tx","props","href","slice","FeedTable","responses","className","style","borderCollapse","border","borderSpacing","fontSize","fontWeight","color","minWidth","map","transactionHash","value","timestamp","gasPrice","key","unix","format","mainChartOpts","tooltips","enabled","custom","CustomTooltips","intersect","mode","position","callbacks","labelColor","tooltipItem","chart","backgroundColor","maintainAspectRatio","legend","display","elements","point","radius","hitRadius","hoverRadius","hoverBorderWidth","scales","xAxes","type","distribution","bounds","time","unit","ticks","source","maxTicksLimit","fontFamily","fontColor","gridLines","yAxes","borderDash","borderDashOffset","lineWidth","z","drawBorder","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","zeroLineWidth","FeedChart","mainChart","datasets","label","borderColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","borderWidth","data","width","height","marginTop","boxShadow","borderRadius","overflow","options","FeedView","title","answer","chartData","minResponses","maxResponses","lastUpdate","deviationThreshold","paddingTop","paddingBottom","marginRight","marginLeft","xs","length","marginBottom","defaultProps","ChainlinkFeedView","feed","currentBlock","drizzleContext","refreshFeed","answerRenderOptions","drizzle","useEffect","timer","setTimeout","refreshHistory","clearTimeout","latestAnswerFormatted","latestAnswerValue","state","latestTimestampValue","latestRoundValue","latestRound","loading","renderAnswer","moment","ResponseReceived","e","returnValues","sender","response","transaction","block","feedViewProps","history","d","x","y","compose","withSetContractFavorite","withSetCacheKey","withRefreshFeed","withNetworkId","withCurrentBlock","flattenProp","withProps","protocol","connect","ownProps","feedByAddress","FeedSelectors","feedByFilterSelector","id","feedByName","name","console","debug","replace","withFeed","withDrizzleContext"],"mappings":"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","file":"static/js/7.f5a7998e.chunk.js","sourcesContent":["/* eslint @typescript-eslint/explicit-function-return-type:0 */\n/* eslint prefer-spread:0 */\n\nimport React from 'react';\n\ninterface Props {\n    address?: string,\n    tx?: string,\n    [key: string]: any\n}\n\nconst EtherScan = ({ address, tx, ...props }: Props) => {\n    if (address)\n        return (<a href={\"https://etherscan.io/address/\" + address} {...props}>{address}</a>)\n    if (tx)\n        return (<a href={\"https://etherscan.io/tx/\" + tx} {...props}>{tx.slice(0, 10) + \"...\"}</a>)\n\n    return null;\n}\n\nexport default EtherScan;","import React from 'react';\nimport Moment from 'react-moment';\nimport EtherScan from \"../Etherscan/EtherScan\"\nimport { ChainlinkAnswer } from '../../store/feed/types';\n\ninterface Props {\n    responses: ChainlinkAnswer[]\n}\n\nconst FeedTable = ({ responses }: Props) =>\n    <table className=\"table table-outline mb-0 d-sm-table table-responsive table-borderless\" style={{ borderCollapse: 'collapse', border: 'none', borderSpacing: 0 }}>\n        <thead>\n            <tr>\n                <th className='px-1 py-3' style={{ border: 'none', fontSize: 16, fontWeight: 'bold', color: '#FA4706', minWidth: 400 }}>Oracle</th>\n                <th className='px-1 py-3' style={{ border: 'none', fontSize: 16, fontWeight: 'bold', color: '#FA4706', minWidth: 100 }}>Answer</th>\n                <th className='px-1 py-3' style={{ border: 'none', fontSize: 16, fontWeight: 'bold', color: '#FA4706', minWidth: 100 }}>Gas Price</th>\n                <th className='px-1 py-3' style={{ border: 'none', fontSize: 16, fontWeight: 'bold', color: '#FA4706', minWidth: 100 }}>Transaction</th>\n                <th className='px-1 py-3' style={{ border: 'none', fontSize: 16, fontWeight: 'bold', color: '#FA4706', minWidth: 240 }}>Date</th>\n            </tr>\n        </thead>\n        <tbody>\n            {\n                responses.map(({ transactionHash, address, value, timestamp, gasPrice }) => {\n                    return (<tr key={transactionHash}>\n                        <td className='px-1 py-3'><EtherScan style={{ fontSize: 15, fontWeight: 300, color: '#000000' }} address={address} /></td>\n                        <td className='px-1 py-3' style={{ fontSize: 15, fontWeight: 300, color: '#000000' }}>{value}</td>\n                        <td className='px-1 py-3' style={{ fontSize: 15, fontWeight: 300, color: '#000000' }}>{gasPrice}</td>\n                        <td className='px-1 py-3'><EtherScan style={{ fontSize: 15, fontWeight: 300, color: '#000000' }} tx={transactionHash} /></td>\n                        <td className='px-1 py-3' style={{ fontSize: 15, fontWeight: 300, color: '#000000' }}>\n                            {timestamp ?\n                                <Moment unix format=\"LLLL\">\n                                    {timestamp}\n                                </Moment> : \"Loading...\"}\n                        </td>\n                    </tr>\n                    )\n                })\n            }\n        </tbody>\n    </table>\n\nexport default FeedTable;","import React from 'react';\n//@ts-ignore\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\nimport { Line } from 'react-chartjs-2';\nimport { Point } from '../../store/types'\n\nconst mainChartOpts = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips,\n        intersect: false,\n        mode: 'index',\n        position: 'average',\n        callbacks: {\n            //@ts-ignore\n            labelColor: function (tooltipItem, chart) {\n                return { backgroundColor: '#FA4706' }\n            }\n        }\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 3,\n            hitRadius: 20,\n            hoverRadius: 5,\n            hoverBorderWidth: 3,\n        },\n    },\n    scales: {\n        xAxes: [{\n            type: 'time',\n            distribution: 'linear',\n            bounds: 'data',\n            time: {\n                unit: 'hour'\n            },\n            ticks: {\n                source: 'auto',\n                maxTicksLimit: 20,\n                fontSize: 16,\n                fontFamily: 'Poppins',\n                fontColor: '#74787C',\n            },\n            gridLines: {\n                display: false,\n            }\n        }],\n        yAxes: [{\n            ticks: {\n                fontSize: 16,\n                fontFamily: 'Poppins',\n                fontColor: '#74787C',\n            },\n            gridLines: {\n                display: true,\n                color: 'rgba(0, 0, 0, 0.1)',\n                borderDash: [13, 13],\n                borderDashOffset: 13,\n                lineWidth: 2,\n                z: 2,\n                drawBorder: false,\n                zeroLineColor: 'rgba(0, 0, 0, 0.1)',\n                zeroLineBorderDash: [13, 13],\n                zeroLineBorderDashOffset: 13,\n                zeroLineWidth: 2,\n            }\n        }]\n    }\n};\n\n\ninterface Props {\n    data: Point<number, number>[]\n}\n\nconst FeedChart = ({ data }: Props) => {\n    const mainChart = {\n        datasets: [\n            {\n                label: '',\n                borderColor: '#FA4706',\n                backgroundColor: 'rgba(0, 0, 0, 0)',\n                pointBorderColor: '#FA4706',\n                pointBackgroundColor: '#FA4706',\n                pointHoverBackgroundColor: '#FA4706',\n                borderWidth: 4,\n                data\n            }\n        ],\n    };\n\n    return (\n        <div className='px-5 py-5' style={{\n            width: '100%',\n            height: 420,\n            marginTop: 40,\n            boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)',\n            borderRadius: 18,\n            backgroundColor: '#FFFFFF'\n        }}>\n            <div className=\"chart-wrapper\" style={{\n                width: '100%',\n                height: '100%',\n                overflow: 'visible'\n            }} >\n                <Line data={mainChart} options={mainChartOpts} />\n            </div>\n        </div>\n    )\n}\n\nexport default FeedChart;","import React from 'react';\nimport {\n    CRow as Row,\n    CCol as Col,\n    CContainer as Container,\n} from '@coreui/react'\n\nimport FeedTable from '../../components/FeedTable'\nimport FeedChart from '../../components/FeedChart'\nimport { FeedBase, ChainlinkAnswer } from '../../store/feed/types';\nimport { Point } from '../../store/types';\n\ninterface Props extends FeedBase {\n    address: string,\n    answer: string,\n    chartData: Point<number, number>[],\n    responses: ChainlinkAnswer[]\n    minResponses: number,\n    maxResponses: number,\n    lastUpdate: Date,\n    deviationThreshold: number\n}\n\nconst FeedView = ({ title, address, answer, responses, chartData, minResponses, maxResponses, lastUpdate, deviationThreshold }: Props) => {\n    return (\n        <>\n            <div style={{ backgroundColor: '#F2F2F2', marginTop: -200, paddingTop: 100, paddingBottom: 50, marginRight: -15, marginLeft: -15 }}>\n                <Container>\n                    <Row className='py-5'>\n                        <Col xs={12}>\n                            <h4 style={{ fontSize: 20, fontWeight: 300, color: '#000000' }}>{address}</h4>\n                            <h1 style={{ fontSize: 40, fontWeight: 'bold', color: '#393939' }}>{title}</h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={6}>\n                            <div className='py-4'>\n                                <h4 style={{ fontSize: 20, fontWeight: 300, color: '#000000' }}>Latest trusted answer</h4>\n                                <h1 style={{ fontSize: 30, fontWeight: 'bold', color: '#000000' }}>{answer}</h1>\n                            </div>\n                            {deviationThreshold > 0 ? <>\n                                <h4 style={{ fontSize: 20, fontWeight: 300, color: '#000000' }}>Primary Aggregation Parameter</h4>\n                                <h1 style={{ fontSize: 30, fontWeight: 'bold', color: '#000000', height: 95 }}>Deviation Threshold: {deviationThreshold}%</h1>\n                            </>\n                                : ''}\n                        </Col>\n                        <Col xs={6}>\n                            {\n                                responses.length > 0 ?\n                                    <div className='py-4'>\n                                        <h4 style={{ fontSize: 20, fontWeight: 300, color: '#000000' }}>Oracle responses {minResponses >= 0 ? <>(minimum {minResponses})</> : ''}</h4>\n                                        <h1 style={{ fontSize: 30, fontWeight: 'bold', color: '#000000' }}>{responses.length}{minResponses >= 0 ? <>/{maxResponses}</> : ''}</h1 >\n                                    </div>\n                                    : ''\n                            }\n                            <h4 style={{ fontSize: 20, fontWeight: 300, color: '#000000' }}>Last Update</h4>\n                            <h1 style={{ fontSize: 30, fontWeight: 'bold', color: '#000000', height: 95 }}>{lastUpdate}</h1>\n                        </Col>\n                    </Row >\n                    {\n                        chartData.length > 0 ?\n                            <Row className='py-5'>\n                                <FeedChart data={chartData} />\n                            </Row> :\n                            ''\n                    }\n                </Container >\n            </div>\n            {\n                responses.length > 0 ?\n                    <div style={{ backgroundColor: '#FFF', paddingTop: 50, paddingBottom: 100, marginRight: -15, marginLeft: -15 }}>\n                        <Container>\n                            <Row>\n                                <FeedTable responses={responses} />\n                            </Row>\n                        </Container >\n                    </div>\n                    : <div style={{ backgroundColor: '#F2F2F2', marginBottom: -200, paddingTop: 50, paddingBottom: 100, marginRight: -15, marginLeft: -15 }} />\n            }\n        </>\n    )\n}\n\nFeedView.defaultProps = {\n    maxResponses: -1,\n    minResponses: -1,\n    responses: [],\n    chartData: [],\n    lastUpdate: '',\n    deviationThreshold: -1\n}\n\nexport default FeedView;","import React, { useEffect } from 'react';\nimport { compose, flattenProp, withProps } from 'recompose'\nimport { connect } from 'react-redux'\nimport moment from 'moment';\n\n\nimport FeedView from './FeedView'\nimport { FeedSelectors } from '../../store/selectors'\nimport { ChainlinkFeed, ChainlinkAnswer, RefreshFeedActionInput, RefreshFeedAction } from '../../store/feed/types'\nimport { renderAnswer } from '../../store/feed/actions'\nimport { withFeed, withDrizzleContext, withSetContractFavorite, withSetCacheKey, withRefreshFeed, withNetworkId, withCurrentBlock } from '../../hoc'\nimport { Block } from '../../store/block/types';\nimport { SetContractFavoriteActionInput, SetContractFavoriteAction } from '../../store/contractFavorite/types';\n\ninterface Props {\n    feed: ChainlinkFeed\n    currentBlock: Block;\n    setContractFavorite: (payload: SetContractFavoriteActionInput) => SetContractFavoriteAction;\n    refreshFeed: (payload: RefreshFeedActionInput) => RefreshFeedAction,\n    drizzleContext: any\n}\n\nconst ChainlinkFeedView = ({\n    feed,\n    currentBlock,\n    drizzleContext,\n    refreshFeed\n}: Props) => {\n    const {\n        answerRenderOptions,\n        address,\n        title\n    } = feed || {}\n    const { drizzle } = drizzleContext;\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            refreshFeed({\n                feed,\n                drizzle,\n                currentBlock,\n                refreshHistory: true\n            })\n        }, 100);\n        return () => clearTimeout(timer);\n    })\n\n    const latestAnswerValue = feed?.state?.value\n    const latestTimestampValue = feed?.state?.timestamp\n    const latestRoundValue = feed?.state?.latestRound\n\n    const loading = !latestAnswerValue || !latestTimestampValue || !latestRoundValue\n    if (loading) return <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\n\n\n\n\n    let latestAnswerFormatted;\n    if (!!latestAnswerValue && !!answerRenderOptions) latestAnswerFormatted = renderAnswer(answerRenderOptions, latestAnswerValue);\n    else if (!!latestAnswerValue) latestAnswerFormatted = `${latestAnswerValue}`\n\n    const lastUpdate = latestTimestampValue ? moment(latestTimestampValue, 'X').format('LLLL') : null;\n    const responses: ChainlinkAnswer[] = feed?.state ? feed?.state?.ResponseReceived.map((e) => {\n        return {\n            address: e.returnValues.sender,\n            value: e.returnValues.response,\n            transactionHash: e.transactionHash,\n            gasPrice: e.transaction?.gasPrice || '',\n            timestamp: e.block?.timestamp || 0\n        }\n    }) : []\n\n    const feedViewProps = {\n        title: title,\n        address,\n        answer: loading ? 'Loading...' : latestAnswerFormatted,\n        lastUpdate: loading ? 'Loading...' : lastUpdate,\n        chartData: feed?.state?.history?.map((d) => { return { x: d.timestamp, y: d.value } }),\n        responses\n    }\n\n    //@ts-ignore\n    return (<FeedView {...feedViewProps} />);\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n    const feedByAddress = FeedSelectors.feedByFilterSelector(state, { protocol: ownProps.protocol, address: ownProps.id }, state)\n    const feedByName = FeedSelectors.feedByFilterSelector(state, { protocol: ownProps.protocol, name: ownProps.id }, state)\n    console.debug(feedByName)\n\n    if (!feedByAddress && !feedByName) {\n        return {}\n    }\n\n    if (feedByAddress && !feedByName) {\n        ownProps.history.replace(`/feeds/${ownProps.protocol}/${feedByAddress.name}`)\n        return {\n            id: feedByAddress.id\n        }\n    }\n\n    return {\n        id: feedByName.id\n    }\n}\n\nChainlinkFeedView.defaultProps = {\n    feed: {}\n}\n\nexport default compose(\n    withSetContractFavorite,\n    withSetCacheKey,\n    withRefreshFeed,\n    withNetworkId,\n    withCurrentBlock,\n    flattenProp('match'),\n    flattenProp('params'),\n    withProps({ protocol: 'chainlink' }),\n    connect(mapStateToProps),\n    withFeed,\n    withDrizzleContext,\n    //@ts-ignore\n)(ChainlinkFeedView);"],"sourceRoot":""}