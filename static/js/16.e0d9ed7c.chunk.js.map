{"version":3,"sources":["components/Aggregator/Aggregator.jsx","views/AggregatorView/AggregatorView.js"],"names":["ContractData","newContextComponents","EtherScan","address","tx","href","slice","AggregatorHead","contract","drizzleContext","useContext","DrizzleContext","Context","drizzle","drizzleState","initialized","ListGroup","ListGroupItem","method","render","value","toFixed","moment","format","nextUpdateDate","add","diff","duration","hours","minutes","seconds","AggregatorTable","connect","state","blocks","useState","roundIdKey","setRoundIdKey","roundId","setRoundId","answers","setAnswers","oracleCount","setOracleCount","useEffect","key","contracts","methods","latestRound","cacheCall","events","web3Contract","ResponseReceived","fromBlock","toBlock","filter","answerId","on","event","returnValues","sender","transactionHash","store","dispatch","type","TX_FETCH","answersLength","Object","keys","length","newRound","Table","hover","responsive","className","Array","map","i","methodArgs","answer","response","txData","gasPrice","timestamp","blockNumber","unix","Aggregator","Card","CardHeader","CardBody","AggregatorView","props","loading","error","errorInfo","console","queryParams","qs","parse","this","location","search","ignoreQueryPrefix","match","params","context","contractConfig","contractName","web3","eth","Contract","AggregatorABI","compilerOutput","abi","addContract","Row","Col","hasError","Component","contextType"],"mappings":"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","file":"static/js/16.e0d9ed7c.chunk.js","sourcesContent":["/* eslint @typescript-eslint/explicit-function-return-type:0 */\n/* eslint prefer-spread:0 */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    CardTitle,\n    Table,\n    ListGroup,\n    ListGroupItem,\n} from 'reactstrap';\n\n//Drizzle\nimport { newContextComponents } from \"@drizzle/react-components\"\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\nimport { connect } from \"react-redux\"\n\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport { TX_RECEIVED, TX_FETCH } from \"../../reducers/txcache\"\nimport { TODOS_RECEIVED, TODOS_FETCH } from \"../../reducers/todos\"\nimport { BLOCK_RECEIVED, BLOCK_FETCH } from \"../../reducers/blocks\"\n\nconst { ContractData } = newContextComponents\n\nconst EtherScan = ({ address, tx }) => {\n    if (address)\n        return (<a href={\"https://etherscan.io/address/\" + address}>{address}</a>)\n    if (tx)\n        return (<a href={\"https://etherscan.io/tx/\" + tx}>{tx.slice(0, 10) + \"...\"}</a>)\n\n    return null;\n}\n\n\nconst AggregatorHead = ({ contract }) => {\n    //console.debug(contract)\n    const drizzleContext = useContext(DrizzleContext.Context)\n    const { drizzle, drizzleState, initialized } = drizzleContext\n\n    if (!initialized) return null;\n\n    return (\n        <ListGroup>\n            <ListGroupItem>Round ID <ContractData\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                contract={contract}\n                method=\"latestRound\"\n                render={(value) => value}\n            /></ListGroupItem>\n            <ListGroupItem>$ <ContractData\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                contract={contract}\n                method=\"latestAnswer\"\n                render={(value) => (value * 1e-8).toFixed(2)}\n            /></ListGroupItem>\n            <ListGroupItem>Last update&nbsp;\n            <ContractData\n                    drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    contract={contract}\n                    method=\"latestTimestamp\"\n                    render={(value) => {\n                        const updateDate = moment(value, 'X');\n                        return (updateDate.format('LLLL'))\n                    }\n                    } />\n            </ListGroupItem>\n            <ListGroupItem>Next update (every 1hr)&nbsp;\n                        <ContractData\n                    drizzle={drizzle}\n                    drizzleState={drizzleState}\n                    contract={contract}\n                    method=\"latestTimestamp\"\n                    render={(value) => {\n                        const updateDate = moment(value, 'X');\n                        const nextUpdateDate = updateDate.add(1, 'hours');\n                        const diff = moment.duration(nextUpdateDate.diff(moment()))\n                        return `${diff.hours()}:${diff.minutes()}:${diff.seconds()}`\n                    }\n                    } />\n            </ListGroupItem>\n        </ListGroup>)\n}\n\nfunction mapStateToProps(state) {\n    const { tx, blocks } = state\n    return { tx, blocks }\n}\n\nconst AggregatorTable = connect(mapStateToProps)(({ contract, tx, blocks }) => {\n    const drizzleContext = useContext(DrizzleContext.Context)\n    const { drizzle, drizzleState } = drizzleContext\n\n    const [roundIdKey, setRoundIdKey] = useState()\n    const [roundId, setRoundId] = useState()\n    const [answers, setAnswers] = useState({})\n    const [oracleCount, setOracleCount] = useState(5)\n\n    useEffect(() => {\n        const key = drizzle.contracts[contract].methods.latestRound.cacheCall()\n        setRoundIdKey(key)\n    }, []);\n\n    useEffect(() => {\n        const events = {};\n        const web3Contract = drizzle.contracts[contract]\n        if (roundId) {\n            web3Contract.events.ResponseReceived({\n                fromBlock: 9700000,\n                toBlock: 'latest',\n                filter: { answerId: roundId }\n            }).on('data', (event) => {\n                events[event.returnValues.sender] = event;\n                const transactionHash = event.transactionHash\n                drizzle.store.dispatch({ type: TX_FETCH, transactionHash })\n                setAnswers(events);\n            })\n        }\n    }, [roundId])\n\n\n    useEffect(() => {\n        const answersLength = Object.keys(answers).length;\n        if (answersLength > oracleCount) {\n            //console.debug(answersLength)\n            setOracleCount(answersLength);\n        }\n    })\n\n    const newRound = drizzleState.contracts[contract].latestRound[roundIdKey]?.value\n    if (newRound != roundId) setRoundId(newRound)\n\n    return (\n        <Table hover responsive className=\"table-outline mb-0 d-none d-sm-table\">\n            <thead className=\"thead-light\">\n                <tr>\n                    <th>Oracle</th>\n                    <th>Answer</th>\n                    <th>Gas Price (Gwei)</th>\n                    <th>Transaction</th>\n                    <th>Date</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    [...Array(oracleCount).keys()].map((i) => {\n                        return (\n                            <ContractData\n                                key={i}\n                                drizzle={drizzle}\n                                drizzleState={drizzleState}\n                                contract={contract}\n                                method={\"oracles\"}\n                                methodArgs={[i]}\n                                render={(address) => {\n                                    const event = answers[address];\n                                    const { returnValues, transactionHash } = event || {};\n                                    const answer = ((returnValues?.response || 0) * 1e-8).toFixed(2)\n                                    const txData = tx[transactionHash] || {}\n                                    const gasPrice = ((txData.gasPrice || 0) * 1e-9).toFixed(2);\n                                    const blockData = blocks[txData.blockNumber] || {}\n                                    const timestamp = blockData.timestamp\n                                    return (<tr>\n                                        <td>\n                                            <div><EtherScan address={address} /></div>\n                                        </td>\n                                        <td>\n                                            <div>{answer}</div>\n                                        </td>\n                                        <td>\n                                            <div>{gasPrice} Gwei</div>\n                                        </td>\n                                        <td>\n                                            <div><EtherScan tx={transactionHash} /></div>\n                                        </td>\n                                        <td>\n                                            <div>\n                                                {timestamp ?\n                                                    <Moment unix format=\"LLLL\">\n                                                        {timestamp}\n                                                    </Moment> : \"loading...\"}\n                                            </div>\n                                        </td>\n                                    </tr>)\n                                }\n                                } />\n                        )\n                    })\n                }\n            </tbody>\n        </Table>\n    );\n})\n\nconst Aggregator = ({ contract }) => {\n    const drizzleContext = useContext(DrizzleContext.Context)\n    const { initialized } = drizzleContext\n\n    if (!initialized) return null;\n\n    return (\n        <div>\n            <Card>\n                <CardHeader>{contract} Aggregate data</CardHeader>\n                <CardBody>\n                    <AggregatorHead contract={contract} />\n                </CardBody>\n            </Card>\n            <Card>\n                <CardHeader>Oracles data</CardHeader>\n                <CardBody>\n                    <AggregatorTable contract={contract} />\n                </CardBody>\n            </Card>\n        </div>\n    )\n\n\n}\n\n\nexport default Aggregator;","/* eslint @typescript-eslint/explicit-function-return-type:0 */\n/* eslint prefer-spread:0 */\n\nimport React, { Component } from 'react';\nimport {\n    Col,\n    Row,\n} from 'reactstrap';\n//Drizzle\nimport qs from 'qs';\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\n\nimport AggregatorABI from '@chainlink/contracts/abi/v0.4/Aggregator.json'\n\nimport Aggregator from \"../../components/Aggregator/Aggregator\"\n\nclass AggregatorView extends Component {\n    static contextType = DrizzleContext.Context;\n\n    constructor(props) {\n        super(props);\n    }\n\n    loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.error(error, errorInfo);\n    }\n\n    render() {\n        const queryParams = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\n        const matchParams = this.props.match.params;\n        const address = matchParams.address || queryParams.address;\n\n        const { drizzle, drizzleState, initialized } = this.context;\n        //console.log(`[LV] ${initialized} ${address}: ${!!drizzle.contracts[address]}`)\n\n        if (!initialized) return null;\n        if (!drizzle.contracts[address]) {\n            const web3Contract = new drizzle.web3.eth.Contract(AggregatorABI.compilerOutput.abi, address)\n\n            const contractConfig = {\n                contractName: address,\n                web3Contract\n            }\n            const events = [\"AnswerUpdated\", \"ResponseReceived\"]\n            // Or using the Drizzle context object\n            drizzle.addContract(contractConfig, events);\n\n            return null;\n        }\n\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col>\n                        <Aggregator contract={address} />\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default AggregatorView;\n"],"sourceRoot":""}