{"version":3,"sources":["reducers/txcache.js","reducers/blocks.js","reducers/todos.js","reducers/customContracts.js","polyfill.js","drizzleOptions.js","store.js","middleware.js","App.js","serviceWorker.js","index.js","web3global.js"],"names":["fetchTx","txRootSaga","TX_FETCH","TX_RECEIVED","txReducer","state","action","type","data","tx","hash","Object","assign","call","web3","eth","getTransaction","transactionHash","put","takeEvery","fetchBlock","blocksRootSaga","BLOCK_FETCH","blocksReducer","block","number","getBlock","fetchTodos","todosRootSaga","fetch","then","response","json","todos","ADD_CUSTOM_CONTRACT","customContractsReducer","contract","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","options","Contract","AggregatorABI","compilerOutput","abi","contracts","events","polls","accounts","persistConfig","key","storage","whitelist","config","drizzleOptions","appReducers","persisted","persistReducer","combineReducers","customContracts","blocks","appSagas","appMiddlewares","store","next","EventActions","EVENT_FIRED","name","contractEvent","contractMessage","returnValues","_message","display","console","log","blockNumber","getState","dispatch","disableReduxDevTools","generateStore","persistor","persistStore","drizzle","Drizzle","DefaultLayout","React","lazy","Login","Register","Page404","Page500","App","loading","Provider","Suspense","fallback","className","exact","path","render","props","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","ethereum","Web3","enable","e","currentProvider","alert"],"mappings":"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","file":"static/js/main.9619cf8b.chunk.js","sourcesContent":["import { call, put, takeEvery } from 'redux-saga/effects'\nimport web3 from '../web3global'\n\n// actions\nexport const TX_FETCH = 'VULCAN/TX_FETCH'\nexport const TX_RECEIVED = 'VULCAN/TX_RECEIVED'\n\n// reducers\nexport const txReducer = (state = {}, action) => {\n    switch (action.type) {\n        case TX_RECEIVED:\n            const data = {}\n            data[action.tx.hash] = action.tx;\n            return Object.assign({}, state, data)\n        default:\n            return state\n    }\n}\n\n// fetch data from service using sagas\nexport function* fetchTx(action) {\n    const tx = yield call(web3.eth.getTransaction, action.transactionHash)\n    yield put({ type: TX_RECEIVED, tx })\n}\n\n// Combine all your redux concerns\n\n// app root saga\nexport function* txRootSaga() {\n    yield takeEvery(TX_FETCH, fetchTx)\n}","import { call, put, takeEvery } from 'redux-saga/effects'\nimport web3 from '../web3global'\n\n// actions\nexport const BLOCK_FETCH = 'VULCAN/BLOCK_FETCH'\nexport const BLOCK_RECEIVED = 'VULCAN/BLOCK_RECEIVED'\n\n// reducers\nexport const blocksReducer = (state = {}, action) => {\n    const data = {}\n\n    switch (action.type) {\n        case BLOCK_RECEIVED:\n            data[action.block.number] = action.block;\n            return Object.assign({}, state, data)\n        case BLOCK_FETCH:\n            data[action.block] = true\n            return Object.assign({}, state, data)\n        default:\n            return state\n    }\n}\n\n// fetch data from service using sagas\nexport function* fetchBlock(action) {\n    const block = yield call(web3.eth.getBlock, action.block)\n    yield put({ type: BLOCK_RECEIVED, block })\n}\n\n// Combine all your redux concerns\n\n// app root saga\nexport function* blocksRootSaga() {\n    yield takeEvery(BLOCK_FETCH, fetchBlock)\n}","import { call, put, takeEvery } from 'redux-saga/effects'\n\n// actions\nexport const TODOS_FETCH = 'VULCAN/TODOS_FETCH'\nexport const TODOS_RECEIVED = 'VULCAN/TODOS_RECEIVED'\n\n// reducers\nexport const todosReducer = (state = [], action) => {\n    if (action.type === TODOS_RECEIVED) {\n        // update your state\n        return action.todos\n    }\n    return state\n}\n\n// fetch data from service using sagas\nexport function* fetchTodos() {\n    const todos = yield fetch('https://jsonplaceholder.typicode.com/todos')\n        .then(response => response.json())\n    yield put({ type: TODOS_RECEIVED, todos })\n}\n\n// Combine all your redux concerns\n\n// app root saga\nexport function* todosRootSaga() {\n    yield takeEvery(TODOS_FETCH, fetchTodos)\n}","import { call, put, takeEvery } from 'redux-saga/effects'\n\n// actions\nexport const ADD_CUSTOM_CONTRACT = 'VULCAN/ADD_CUSTOM_CONTRACT'\n\n// reducers\nexport const customContractsReducer = (state = [], action) => {\n    if (action.type === ADD_CUSTOM_CONTRACT) {\n        // update your state\n        return [...state, action.contract]\n    }\n    return state\n}","/* eslint @typescript-eslint/explicit-function-return-type:0 */\n\n/*\n * required polyfills\n */\nimport 'core-js';\nimport 'core-js/features/set/map';\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\n// import 'core-js/es6/array'\n// import 'core-js/es6/regexp'\n// import 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\n// import 'core-js/es6/set'\n// import 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function() {\n    if (typeof window.CustomEvent === 'function') return false;\n\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        const evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n})();\n","import web3 from './web3global'\nimport AggregatorABI from '@chainlink/contracts/abi/v0.4/Aggregator.json'\n\nconst address = \"0xF5fff180082d6017036B771bA883025c654BC935\"\nconst AggregatorUSDBTC = new web3.eth.Contract(AggregatorABI.compilerOutput.abi, address)\n\nconst options = {\n    /*\n    web3: {\n        block: false,\n        fallback: {\n            type: \"ws\",\n            url: \"ws://127.0.0.1:7545\"\n        }\n    },\n    */\n    contracts: [\n    ],\n    events: {\n    },\n    polls: {\n        accounts: 1500\n    }\n}\n\nexport default options\n","import { generateStore } from '@drizzle/store'\n\nimport drizzleOptions from \"./drizzleOptions\"\n//import { loadLocalStorage, saveLocalStorage } from \"./localstorage\"\nimport { contractEventNotifier, contractAddNotifier } from \"./middleware\"\nimport { txReducer, txRootSaga } from \"./reducers/txcache\";\nimport { todosReducer, todosRootSaga } from \"./reducers/todos\";\nimport { blocksReducer, blocksRootSaga } from \"./reducers/blocks\";\nimport { customContractsReducer } from \"./reducers/customContracts\";\n\nimport { createStore, combineReducers } from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nconst persistConfig = {\n    key: 'persisted',\n    storage,\n    whitelist: ['customContracts']\n}\n\nconst appReducers = {\n    persisted: persistReducer(persistConfig, combineReducers({\n        customContracts: customContractsReducer,\n    })),\n    tx: txReducer,\n    blocks: blocksReducer\n}\n\nconst appSagas = [todosRootSaga, txRootSaga, blocksRootSaga]\nconst appMiddlewares = [contractEventNotifier, contractAddNotifier]\nconst config = {\n    drizzleOptions,\n    appReducers,\n    appSagas,\n    appMiddlewares,\n    disableReduxDevTools: false // enable ReduxDevTools!\n}\nconst store = generateStore(config)\n\nexport const persistor = persistStore(store);\nexport default store;","import { EventActions } from \"@drizzle/store\"\nimport { TX_FETCH, TX_RECEIVED } from \"./reducers/txcache\"\nimport { BLOCK_FETCH, BLOCK_RECEIVED } from \"./reducers/blocks\"\n\n\nexport const contractEventNotifier = store => next => action => {\n    if (action.type === EventActions.EVENT_FIRED) {\n        const contract = action.name\n        const contractEvent = action.event.event\n        const contractMessage = action.event.returnValues._message\n        const display = `${contract}(${contractEvent}): ${contractMessage}`\n\n        // interact with your service\n        console.log(\"Contract event fired\", display)\n    }\n    return next(action)\n}\n\nexport const contractAddNotifier = store => next => action => {\n    if (action.type === \"CONTRACT_INITIALIZED\") {\n        // interact with your service\n        console.log(\"Contract initialized fired\", action)\n    } else if (action.type === \"CONTRACT_INITIALIZING\") {\n        // interact with your service\n        console.log(\"Contract initializing fired\", action)\n    } else if (action.type === TX_RECEIVED) {\n        const block = action.tx.blockNumber;\n        if (!store.getState().blocks[block]) store.dispatch({ type: BLOCK_FETCH, block });\n    } else if (action.type !== \"ACCOUNT_BALANCE_FETCHED\" &&\n        action.type !== \"ACCOUNTS_FETCHED\" && action.type !== \"SYNCING_ACCOUNTS\") {\n        console.log(action.type)\n    }\n    return next(action)\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { Drizzle } from \"@drizzle/store\"\nimport { DrizzleContext } from \"@drizzle/react-plugin\"\n\nimport './App.scss';\n\nimport drizzleOptions from \"./drizzleOptions\"\nimport store, { persistor } from \"./store\"\n\nconst drizzle = new Drizzle(drizzleOptions, store)\n\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./containers/DefaultLayout'));\n\n// Pages\nconst Login = React.lazy(() => import('./views/Pages/Login'));\nconst Register = React.lazy(() => import('./views/Pages/Register'));\nconst Page404 = React.lazy(() => import('./views/Pages/Page404'));\nconst Page500 = React.lazy(() => import('./views/Pages/Page500'));\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                    <DrizzleContext.Provider drizzle={drizzle}>\n                        <HashRouter>\n                            <React.Suspense fallback={loading()}>\n                                <Switch>\n                                    <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props} />} />\n                                    <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props} />} />\n                                    <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props} />} />\n                                    <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props} />} />\n                                    <Route path=\"/\" name=\"Home\" render={props => <DefaultLayout {...props} />} />\n                                </Switch>\n                            </React.Suspense>\n                        </HashRouter>\n                    </DrizzleContext.Provider>\n                </PersistGate>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n\n                            // Execute callback\n                            if (config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\nimport 'react-app-polyfill/stable';\n// import 'react-app-polyfill/ie11'; // For IE 11 support\nimport './polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Web3 from 'web3'\n\nlet web3;\n// Modern DApp Browsers\nif (window.ethereum) {\n    web3 = new Web3(window.ethereum);\n    try {\n        window.ethereum.enable().then(function () {\n            // User has allowed account access to DApp...\n        });\n    } catch (e) {\n        // User has denied account access to DApp...\n    }\n}\n// Legacy DApp Browsers\nelse if (window.web3) {\n    web3 = new Web3(window.web3.currentProvider);\n}\n\n// Non-DApp Browsers\nelse {\n    alert('You have to install MetaMask !');\n}\n\nexport default web3;"],"sourceRoot":""}